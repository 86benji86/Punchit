# CALLBACKS - PROMISES - ASYNC/AWAIT

## PACKAGE.JSON

Con npm init iniciamos el control de proyecto de npm que crea el archivo package.json.
Tiene configuraciones del proyecto y guarda las dependencias del proyecto.
El punto de entrada es el archivo .js del proyecto.

- index.html es el de arranque
- Readme.MD el de la descripcion del proyecto.

Nodos dinamicos: Se llenan en funcion de la request a la API (lo que devuelva la API va a ser el contenido). Dentro hay una estructura minima que se va a iterar para generar la pagina. Ej: Una columna por personaje.

## CALLBACKS 

Funciones que se ejecutan en caso de que otra cosa pase. Son dependientes de que se de esa situacion (ej: Un click). 
Se pasa una funcion en otra funcion. 
funcionPrimaria(callBack, condicionParaEjecutarse) -> La condicion puede ser tiempo por ejemplo. 
Llama a una funcion despues de X cantidad de tiempo (si se indica)
Ej1: 
setTimeout(() => {
	console.log("3");
	setTimeout(( => {
		console.log("2");
		setTimeout(( => 
			console.log("1");
		}, 1000);
	}, 1000);
}, 1000);

Puede ser un listener a un click
Ej2: 
btn.addEventListener("click", function(e = event) => {
	console.log("je"); // Se imprime cada vez que haya un click en el boton btn. 
});



## PROMISES 

objeto|variable.promises tiene sus promios metodos. 
Siempre tienen un success path y un failure path (.then y .catch) 

## FUNCIONES ASINCRONICAS (ASYNC - AWAIT)

Asincronico podria tomarse como un demorar y despues seguir.
Se agrega la palabra reservada **async** al momento de definir la funcion adelante de los parametros que va a recibir y **await** adelante de la operacion que a esperar hasta que se resuelva -hasta que no la cumple, no va a la linea de abajo-. Ej: Hasta que el servidor contesta.

Una vez que completa lo que esta marcado con await, recien ahi avanza a la siguiente linea de codigo. 
En lugar de usar .then usa async y await donde tiene que esperar. 
Usa try {} catch {}

- Si una operacion es de tipo await, js pide que la funcion sea de tipo async.
- Al llamarse la funcion asyncronica, devuelve una promesa (en el momento llamado, puede que despues de llamarla ya se haya resuelto).
- Siempre que se llame a una funcion async, hay que poner await adelante del nombre para que devuelva el resultad y no la promesa con su estado (Promise {state; "pendind"}). Con await espera que una promesa termine.
- Cuando se hace un request http, cuando se espera un mail, request a la DB, es recomendable usar async - await.

Las funciones async admiten try y catch, son un handler error. El catch solo se ejecuta en caso de error (se puede hacer uno por cada funcion async).

- Si la funcion falla, el try pasa el error al catch como parametro.

try {
codigo a ejecutar;
} catch (err) { // err es el parametro de la funcion. Indistinto que se pone.
console.error(err); // codigo en caso que no pueda ejecutar el try
}

## FETCH

Hace peticiones http. GET es el metodo por defecto. fetch(url);
**Antes** se hac√≠a
fetch(url)
.then()
.then()
.catch()
**AHORA** se hace con async - await

## QUERY PARAMS

Se indican con un ?, nombre=valor. Se los separa cuando son varios con un &.

## PASOS

1. Hacer una peticion HTTP al servidor
   - Se puede setear la direccion como constante const URL = ""
   - Con **fetch(url)** se puede hacer las peticiones mediante JS. Es una funcion nativa del browser. El tipo de peticion GET es el method por defecto.
     - Recomendado usar un await antes del fetch, previo async al momento de definir los parametros de la funcion.
   - La respuesta del servidor, se puede transformar en objeto literal usando el metdo .json(). Con un await adelante se evita que quede en promise pending. Avanza una vez que convirtio a todos los personajes en una entrada del objeto.
2. Cargar informacion en los nodos. Lo que se define es la carga de la estructura minima y despues por ciclos iterar hasta crear todos los necesarios.
   - return node en cada iteracion.

## CORS

Politicas que se tienen entre si un cliente y un servidor. Las peticiones que se pueden hacer.

